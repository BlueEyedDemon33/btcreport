#!/usr/bin/python3

# This is free and unencumbered software released into the public domain.

# Anyone is free to copy, modify, publish, use, compile, sell, or
# distribute this software, either in source code form or as a compiled
# binary, for any purpose, commercial or non-commercial, and by any
# means.

# In jurisdictions that recognize copyright laws, the author or authors
# of this software dedicate any and all copyright interest in the
# software to the public domain. We make this dedication for the benefit
# of the public at large and to the detriment of our heirs and
# successors. We intend this dedication to be an overt act of
# relinquishment in perpetuity of all present and future rights to this
# software under copyright law.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# For more information, please refer to <https://unlicense.org>

import os
import csv
import math
import argparse
from string import Template
from datetime import datetime
from collections import OrderedDict
from dataclasses import dataclass
import webbrowser
from prettytable import PrettyTable
from btcget import *

HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>BTC Report</title>
    <style>
        table, th, td {
            border: 1px solid black;
            border-collapse: collapse;
        }
        th, td {
            padding: 8px;
            text-align: right;
        }
    </style>
</head>
<body>
    <h1>BTC Report</h1>
    $table

    <p>Report generated by <em>btcreport.py</em> on $timestamp</p>
</body>
</html>
"""

REPORT_FIELDS = {
    "cost_basis": "Cost Basis",
    "avg_btc_price": "Average BTC price",
    "asset_value": "Asset value",
    "asset_gain_d": "Asset gain($)",
    "asset_gain_p": "Asset gain(%)",
    "total_btc": "Total BTC",
    "btc_in_custody": "BTC in custody",
    "total_transactions": "Total transactions"
}

BTC_REPORT_FILE = "btcreport"


@dataclass
class BtcReportData:
    cost_basis: float = 0
    avg_btc_price: float = 0
    asset_value: float = 0
    asset_gain_d: float = 0
    asset_gain_p: float = 0
    total_btc: float = 0
    btc_in_custody: float = 0
    total_transactions: int = 0
    btc_price: float = 0

    def compute_avg_price(self) -> None:
        self.avg_btc_price = self.btc_price / self.total_transactions

    def compute_asset_value(self, btc_market_price):
        self.asset_value = btc_market_price * self.total_btc

    def compute_asset_gains(self) -> None:
        self.asset_gain_d = self.asset_value - self.cost_basis
        self.asset_gain_p = ((self.asset_value - self.cost_basis) / self.cost_basis) * 100

    def get_report_data(self) -> OrderedDict:
        d_fmt = "${:,}"
        p_fmt = "{}%"
        report_data = OrderedDict({REPORT_FIELDS[key]: None for key in REPORT_FIELDS})
        report_data[REPORT_FIELDS["cost_basis"]] = d_fmt.format(self.cost_basis)
        report_data[REPORT_FIELDS["avg_btc_price"]] = d_fmt.format(round_down(self.avg_btc_price, 2))
        report_data[REPORT_FIELDS["asset_value"]] = d_fmt.format(round_down(self.asset_value, 2))
        report_data[REPORT_FIELDS["asset_gain_d"]] = d_fmt.format(round_down(self.asset_gain_d, 2))
        report_data[REPORT_FIELDS["asset_gain_p"]] = p_fmt.format(round_down(self.asset_gain_p, 2))
        report_data[REPORT_FIELDS["total_btc"]] = round_down(self.total_btc, 7)
        report_data[REPORT_FIELDS["btc_in_custody"]] = round_down(self.btc_in_custody, 7)
        report_data[REPORT_FIELDS["total_transactions"]] = self.total_transactions

        return report_data


def round_down(n, decimals=0):
    multiplier = 10**decimals
    return math.floor(n * multiplier) / multiplier

def generate_html(report_details):
    report_html_file = BTC_REPORT_FILE + ".html"
    template = Template(HTML_TEMPLATE)
    table = PrettyTable()
    table.header = False
    for field in report_details:
        table.add_row([field, report_details[field]])
    
    with open(report_html_file, "w", encoding="utf-8") as html_file:
        html_file.write(template.substitute(
            table = table.get_html_string(),
            timestamp = datetime.now().strftime("%c.")
        ))

    print("Generated report file: {}".format(report_html_file))
    webbrowser.open(f"file://{os.getcwd()}/{report_html_file}")
    

def generate_pdf():
    pass

def get_report_details(csv_reader, btc_market_price):

    report_data = BtcReportData()

    for record in csv_reader:
        if record["Transaction Type"] == "Bitcoin Buy":
            report_data.cost_basis += abs(float(record["Net Amount"].replace("$", "")))
            report_data.total_btc += float(record["Asset Amount"])
            report_data.btc_price += float(record["Asset Price"].replace("$", "").replace(",", ""))
            report_data.total_transactions += 1
        if record["Transaction Type"] == "Bitcoin Withdrawal":
            report_data.btc_in_custody += float(record["Asset Amount"])
    
    report_data.compute_asset_value(btc_market_price)
    report_data.compute_asset_gains()
    report_data.compute_avg_price()

    return report_data.get_report_data()
    

def generate_report(cash_app_csv, btc_market_price, report_format="html"):
    csv_reader = read_csv(cash_app_csv)
    report = get_report_details(csv_reader, btc_market_price)
    if report_format == "html":
        generate_html(report)

def read_csv(cash_app_csv):
    with open(cash_app_csv, "r", encoding="utf-8", newline="") as csv_file:
        return list(csv.DictReader(csv_file))

def main():

    parser = argparse.ArgumentParser()
    parser.add_argument("csv_file", help="Cash App CSV export")
    parser.add_argument("--report_format", default="html", help="Output report format")
    args = parser.parse_args()
    config = load_config()
    api_backend = ApiBackendFactory.create_backend(config["backend"],
                                                    config["key"],
                                                    config["currency"])

    btc_market_price = api_backend.get_btc_price()

    generate_report(args.csv_file, btc_market_price, args.report_format)

if __name__ == "__main__":
    main()
